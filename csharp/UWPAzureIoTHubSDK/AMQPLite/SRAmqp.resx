<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmqpChannelNotFound" xml:space="preserve">
    <value>The session channel '{0}' cannot be found.</value>
  </data>
  <data name="AmqpHandleExceeded" xml:space="preserve">
    <value>Cannot allocate more handles. The maximum number of handles is {0}.</value>
  </data>
  <data name="AmqpHandleNotFound" xml:space="preserve">
    <value>The link handle '{0}' cannot be found in session '{1}'.</value>
  </data>
  <data name="AmqpIllegalOperationState" xml:space="preserve">
    <value>Operation '{0}' is not valid under state: {1}.</value>
  </data>
  <data name="AmqpInvalidFormatCode" xml:space="preserve">
    <value>The format code '{0}' at frame buffer offset '{1}' is invalid.</value>
  </data>
  <data name="AmqpOperationNotSupported" xml:space="preserve">
    <value>{0} is not supported over AMQP.</value>
  </data>
  <data name="AmqpTimeout" xml:space="preserve">
    <value>The operation {0} did not complete within the allocated time {1} for object {2}.</value>
  </data>
  <data name="AmqpUnknownDescriptor" xml:space="preserve">
    <value>The descriptor {0} is unknown.</value>
  </data>
  <data name="DeliveryLimitExceeded" xml:space="preserve">
    <value>There is no credit to accept a new delivery (id={0}) on the link.</value>
  </data>
  <data name="EncodingTypeNotSupported" xml:space="preserve">
    <value>The type '{0}' is not a valid AMQP type and cannot be encoded.</value>
  </data>
  <data name="InvalidAddressFormat" xml:space="preserve">
    <value>The address is not correctly formatted.</value>
  </data>
  <data name="InvalidDeliveryIdOnTransfer" xml:space="preserve">
    <value>transfer.delivery-id {0} is invalid (expect: {1})</value>
  </data>
  <data name="InvalidFrameSize" xml:space="preserve">
    <value>Invalid frame size:{0}, maximum frame size:{1}.</value>
  </data>
  <data name="InvalidMapCount" xml:space="preserve">
    <value>The map count {0} is invalid. It must be an even number.</value>
  </data>
  <data name="InvalidMapKeyType" xml:space="preserve">
    <value>The key type {0} is invalid. The map key is restricted to {1}.</value>
  </data>
  <data name="InvalidSequenceNumberComparison" xml:space="preserve">
    <value>Comparison of {0} and {1} is invalid because the result is undefined.</value>
  </data>
  <data name="LinkNotFound" xml:space="preserve">
    <value>The link name {0} in the received attach cannot be found.</value>
  </data>
  <data name="SaslNegoFailed" xml:space="preserve">
    <value>Sasl negotiation failed with code {0}.</value>
  </data>
  <data name="WindowViolation" xml:space="preserve">
    <value>There is no window to accept an incoming transfer (incoming-id={0}).</value>
  </data>
</root>