// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Azure.Devices.Client
{
    static class CustomHeaderConstants
    {
        /// <summary>
        /// Used in message responses and feedback
        /// Specifies the tracing correlation Id for the request; the resource provider *must* log this 
        /// so that end-to-end requests can be correlated across Azure. 
        /// </summary>
        public const string CorrelationId = "iothub-correlationid";

        /// <summary>
        /// [Required for two way requests] Used to correlate two-way communication. 
        /// Format: A case-sensitive string ( up to 128 char long) of ASCII 7-bit alphanumeric chars
        ///  + {'-', ':', '/', '\', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''}. 
        /// Non-alphanumeric characters are from URN RFC.
        /// </summary>
        public const string MessageId = "iothub-messageid";

        /// <summary>
        /// [Required] Destination of the message
        /// </summary>
        public const string To = "iothub-to";

        /// <summary>
        /// Time when the Message was received by the server
        /// </summary>
        public const string EnqueuedTime = "iothub-enqueuedtime";

        /// <summary>
        /// Number of times the message has been previously delivered
        /// </summary>
        public const string DeliveryCount = "iothub-deliverycount";

        /// <summary>
        /// [Optional] The time when this message is considered expired
        /// </summary>
        public const string ExpiryTimeUtc = "iothub-expiry";

        /// <summary>
        /// [Required in feedback messages] Used to specify the origin of messages generated by IOT hub. Possible value: “{hub name}/”
        /// </summary>
        public const string UserId = "iothub-userid";

        /// <summary>
        /// [Optional] Used to specify the role of the message in the communication pattern. 
        /// Possible values: 
        ///     “d2c”: event message (device to cloud) 
        ///     “c2d”: message 
        ///     “d2creq”: inquiry request 
        ///     “d2cres”: inquiry response 
        ///     “c2dreq”: command request 
        ///     “c2dres”: command response
        /// </summary>
        public const string Operation = "iothub-operation";

        /// <summary>
        /// [Optional] Used to specify the feedback required for the consumption of the message by the device. 
        /// Possible values: 
        ///     “none”: no feedback 
        ///     “positive”: receive a feedback message if the message was consumed 
        ///     “negative”: receive a feedback message if the message expired without being completed by the device 
        ///     “full”: both positive and negative
        /// </summary>
        public const string Ack = "iothub-ack";

        /// <summary>
        /// The lock token of the retrieved message 
        /// </summary>
        public const string MessageLockToken = "iothub-messagelocktoken";

        /// <summary>
        /// Amount of time in seconds to lock message before abandoning the lock and allowing the message to be retrieved again
        /// </summary>
        public const string MessageLockTimeout = "iothub-messagelocktimeout";

        /// <summary>
        /// iothub-sequencenumber
        /// A monotonically increasing identifier for each message
        /// </summary>
        public const string SequenceNumber = "iothub-sequencenumber";

        /// <summary>
        /// iothub-servicetrackingid
        /// A tracking id to help trace errors on the service
        /// </summary>
        public const string TrackingId = "iothub-servicetrackingid";

        /// <summary>
        /// Prefix for all Application property Http Headers
        /// </summary>
        public const string HttpAppPropertyPrefix = "iothub-app-";

        /// <summary>
        /// Internal HTTP custom headers
        /// </summary>
        public const string HttpIotHubName = "iothub-name";

        public const string HttpIotHub = "iothub-metadata";

        public const string HttpDevice = "iothub-devicemetadata";

        /// <summary>
        /// x-ms-client-ip-address
        /// Set to the client IP address used in the request; this is required since the resource provider 
        /// will not have access to the client IP.
        /// </summary>
        public const string ClientIpAddress = "x-ms-client-ip-address";

        /// <summary>
        /// x-ms-client-principal-name
        /// Set to the principal ID / UPN of the client JWT making the request.
        /// </summary>
        public const string PrincipalName = "x-ms-client-principal-name";

        /// <summary>
        /// x-ms-client-tenant-id
        /// Set to the tenant ID of the client JWT making the request.
        /// </summary>
        public const string ClientTenantId = "x-ms-client-tenant-id";

        /// <summary>
        /// x-ms-client-audience
        /// Set to the tenant ID of the client JWT making the request.
        /// </summary>
        public const string ClientAudience = "x-ms-client-audience";

        /// <summary>
        /// x-ms-client-issuer
        /// Set to the issuer of the client JWT making the request.
        /// </summary>
        public const string ClientIssuer = "x-ms-client-issuer";

        /// <summary>
        /// x-ms-client-object-id
        /// Set to the object Id of the client JWT making the request.
        /// </summary>
        public const string ClientObjectId = "x-ms-client-object-id";

        /// <summary>
        /// x-ms-client-app-id
        /// Set to the app Id of the client JWT making the request.
        /// </summary>
        public const string ClientAppId = "x-ms-client-app-id";

        /// <summary>
        /// x-ms-client-request-id
        /// Caller-specified request ID, in the form of a GUID with no decoration such as curly braces 
        /// (e.g. client-request-id: 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0). 
        /// A caller-defined value that identifies the given request.   If specified, this will be 
        /// included in response information as a way to map the request. 
        /// If the caller provides this header – the resource provider *must* log this with their 
        /// traces to facilitate tracing a single request.
        /// </summary>
        public const string ClientRequestId = "x-ms-client-request-id";

        /// <summary>
        /// x-ms-return-client-request-id
        /// Optional
        /// True or false and indicates if a client-request-id should be provided.
        /// </summary>
        public const string ReturnClientRequestId = "x-ms-return-client-request-id";

        /// <summary>
        /// x-ms-activity-id
        /// The value that is used to pass activityID in REST API between services
        /// </summary>
        public const string ActivityId = "x-ms-activity-id";

        /// <summary>
        /// api-version
        /// Specifies the version of the protocol used to make this request.
        /// </summary>
        public const string ApiVersion = "api-version";

        /// <summary>
        /// Azure-AsyncOperation
        /// Set to the URL where the result of the long running operation can be checked; to optionally be used in addition to the Location header.
        /// </summary>
        public const string MicrosoftAsyncOperationHeaderName = "Azure-AsyncOperation";

        /// <summary>
        /// x-ms-request-id
        /// A unique identifier for the current operation, service generated.
        /// All the resource providers *must* return this value in the response headers to facilitate debugging.
        /// </summary>
        public const string RequestId = "x-ms-request-id";
    }
}
