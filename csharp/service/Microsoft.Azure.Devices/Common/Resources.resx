<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionItemIsAlreadyScheduled" xml:space="preserve">
    <value>The ActionItem was scheduled for execution but has not completed yet.</value>
  </data>
  <data name="ArgumentNullOrEmpty" xml:space="preserve">
    <value>The argument {0} is null or empty.</value>
  </data>
  <data name="ArgumentNullOrWhiteSpace" xml:space="preserve">
    <value>The argument {0} is null or white space.</value>
  </data>
  <data name="ArgumentOutOfRange" xml:space="preserve">
    <value>The value supplied must be between {0} and {1}.</value>
  </data>
  <data name="AsyncCallbackThrewException" xml:space="preserve">
    <value>An AsyncCallback threw an exception.</value>
  </data>
  <data name="AsyncResultAlreadyEnded" xml:space="preserve">
    <value>End cannot be called twice on the same AsyncResult.</value>
  </data>
  <data name="AsyncResultCompletedTwice" xml:space="preserve">
    <value>The IAsyncResult implementation '{0}' tried to complete a single operation multiple times. This could be caused by an incorrect application of IAsyncResult implementation or other extensibility code, such as an IAsyncResult that returns incorrect CompletedSynchronously values, or invokes the AsyncCallback multiple times.</value>
  </data>
  <data name="AsyncTransactionException" xml:space="preserve">
    <value>An exception was thrown from a TransactionScope used to flow a transaction into an asynchronous operation.</value>
  </data>
  <data name="BufferAllocationFailed" xml:space="preserve">
    <value>Failed to allocate a managed memory buffer of {0} bytes. The amount of available memory may be low.</value>
  </data>
  <data name="BufferIsNotRightSizeForBufferManager" xml:space="preserve">
    <value>This buffer cannot be returned to the buffer manager because it is the wrong size.</value>
  </data>
  <data name="CreateSessionOnClosingConnection" xml:space="preserve">
    <value>Can't create session when the connection is closing.</value>
  </data>
  <data name="CreditListenerAlreadyRegistered" xml:space="preserve">
    <value>Credit listener is already registered.</value>
  </data>
  <data name="DispositionListenerAlreadyRegistered" xml:space="preserve">
    <value>Disposition listener is already registered.</value>
  </data>
  <data name="DispositionListenerSetNotSupported" xml:space="preserve">
    <value>Not supported when the disposition listener is set.</value>
  </data>
  <data name="ErrorConvertingToChar" xml:space="preserve">
    <value>Failed to convert to a char.</value>
  </data>
  <data name="FailFastMessage" xml:space="preserve">
    <value>An unrecoverable error occurred. For diagnostic purposes, this English message is associated with the failure: '{0}'.</value>
  </data>
  <data name="InvalidAsyncResult" xml:space="preserve">
    <value>The AsyncResult object used to end this operation was not the object that was returned when the operation was initiated.</value>
  </data>
  <data name="InvalidAsyncResultImplementation" xml:space="preserve">
    <value>An incorrect implementation of the IAsyncResult interface may be returning incorrect values from the CompletedSynchronously property or calling the AsyncCallback more than once. The type {0} could be the incorrect implementation.</value>
  </data>
  <data name="InvalidAsyncResultImplementationGeneric" xml:space="preserve">
    <value>An incorrect implementation of the IAsyncResult interface may be returning incorrect values from the CompletedSynchronously property or calling the AsyncCallback more than once.</value>
  </data>
  <data name="InvalidFrameSize" xml:space="preserve">
    <value>Invalid frame size:{0}, maximum frame size:{1}.</value>
  </data>
  <data name="InvalidNullAsyncResult" xml:space="preserve">
    <value>A null value was returned from an asynchronous 'Begin' method or passed to an AsyncCallback. Asynchronous 'Begin' implementations must return a non-null IAsyncResult and pass the same IAsyncResult object as the parameter to the AsyncCallback.</value>
  </data>
  <data name="InvalidSemaphoreExit" xml:space="preserve">
    <value>Object synchronization method was called from an unsynchronized block of code.</value>
  </data>
  <data name="IOThreadTimerCannotAcceptMaxTimeSpan" xml:space="preserve">
    <value>IOThreadTimer cannot accept Timespan.MaxValue.</value>
  </data>
  <data name="MessageListenerAlreadyRegistered" xml:space="preserve">
    <value>Message listener is already registered.</value>
  </data>
  <data name="NotSupportFrameCode" xml:space="preserve">
    <value>Unsupported type {0} for array.</value>
  </data>
  <data name="ServerCertificateNotSet" xml:space="preserve">
    <value>Service certificate must be set.</value>
  </data>
  <data name="ShipAssertExceptionMessage" xml:space="preserve">
    <value>An unexpected failure occurred. Applications should not attempt to handle this error. For diagnostic purposes, this English message is associated with the failure: {0}.</value>
  </data>
  <data name="TargetHostNotSet" xml:space="preserve">
    <value>TargetHost must be set.</value>
  </data>
  <data name="TimeoutMustBeNonNegative" xml:space="preserve">
    <value>Argument {0} must be a non-negative timeout value. The provided value was {1}.</value>
  </data>
  <data name="TimeoutMustBePositive" xml:space="preserve">
    <value>Argument {0} must be a positive timeout value. The provided value was {1}.</value>
  </data>
  <data name="OperationTimedOut" xml:space="preserve">
    <value>The operation timed out.</value>
  </data>
  <data name="BufferAlreadyReclaimed" xml:space="preserve">
    <value>The buffer has already been reclaimed.</value>
  </data>
  <data name="InvalidBufferSize" xml:space="preserve">
    <value>The buffer size is invalid.</value>
  </data>
  <data name="ObjectIsReadOnly" xml:space="preserve">
    <value>This object is read-only and cannot be modified.</value>
  </data>
  <data name="ValueMustBeNonNegative" xml:space="preserve">
    <value>The value of this argument must be non-negative.</value>
  </data>
  <data name="UserErrorFormat" xml:space="preserve">
    <value>{0} If you contact a support representative please include this correlation identifier: {1}, timestamp: {2:u}, errorcode: IH{3}.</value>
  </data>
  <data name="UnspecifiedError" xml:space="preserve">
    <value>An error occurred.</value>
  </data>
  <data name="StringIsNotBase64" xml:space="preserve">
    <value>'{0}' is not a valid Base64 encoded string.</value>
  </data>
  <data name="IotHubSuspendedException" xml:space="preserve">
    <value>IotHub '{0}' is suspended</value>
  </data>
  <data name="DeviceQuotaExceededExceptionMessage" xml:space="preserve">
    <value>Total number of devices on IotHub '{0}' exceeded the allocated quota. Max allowed device count : '{1}', current device count : '{2}'. Consider increasing the units for this hub to increase the quota.</value>
  </data>
  <data name="MessageQuotaExceededExceptionMessage" xml:space="preserve">
    <value>Total number of messages on IotHub '{0}' exceeded the allocated quota. Max allowed message count : '{1}', current message count : '{2}'. Send and Receive operations are blocked for this hub until the next UTC day. Consider increasing the units for this hub to increase the quota.</value>
  </data>
  <data name="DeviceNotRegistered" xml:space="preserve">
    <value>A device with ID '{0}' is not registered.</value>
  </data>
  <data name="DeviceAlreadyExists" xml:space="preserve">
    <value>A device with ID '{0}' is already registered.</value>
  </data>
  <data name="InternalServerError" xml:space="preserve">
    <value>Internal server error.</value>
  </data>
  <data name="DeviceImportError" xml:space="preserve">
    <value>Import error for device ID '{0}': {1}</value>
  </data>
  <data name="ETagMismatch" xml:space="preserve">
    <value>ETag mismatch for device ID '{0}'</value>
  </data>
  <data name="InvalidDeviceLine" xml:space="preserve">
    <value>Invalid device format in line: {0}</value>
  </data>
  <data name="DeviceKeyLengthInvalid" xml:space="preserve">
    <value>The primary and secondary keys must be between {0} and {1} bytes in length.</value>
  </data>
  <data name="DeviceNotFound" xml:space="preserve">
    <value>"Device {0} at IotHub {1} not registered"</value>
  </data>
</root>